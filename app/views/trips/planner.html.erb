<h1>Trip planning</h1>
<%= "Looks like we will be traveling to " + @travel %>


<h3>Here are some possible flights</h3>


<p id="calendarDates">Dates</p>

<div id="tooltip" class="hidden">
        <p><strong id="myDates">Dates</strong></p>
        <p><span id="value">100</span></p>
</div>

<table>
	<tr>
		<td id="graph"></td>
		<td id="calendar"></td>
	</tr>
</table>

<script type="text/javascript">
	
	function filterDate(fDate, date) {
		//w("fDate = " + fDate + " | date = " + date)
		if(fDate == date){
			return true;
		}
		else{
			return false;
		}
	}

	
	// function convertDateTimeToDate(date){
	// 	if(date.indexOf("T") == -1){
	// 		return new Date(date.substring(0,date.indexOf("T")));
	// 	}
	// 	else{
	// 		return date
	// 	}
	// }

	var dataset = <%= @travelDateInfo.to_s.html_safe %>;
	var flights = <%= @possibleFlights.to_json.to_s.html_safe %>;
	var hotels = <%= @possibleHotels.to_json.to_s.html_safe %>;
	var rentalCars = <%= @possibleRentalCars.to_json.to_s.html_safe %>;
	//w and h


	//Width and height
	var w = 800;
	var h = 600;
	var padding = 40;
	var minDate = Date.parse(dataset[0].startDate).clearTime();
	var maxDate = Date.parse(dataset[dataset.length-1].startDate).clearTime();
	maxDate = maxDate.add(3).days();

	// var minDate = new Date(dataset[0].startDate);
	// var maxDate = new Date(dataset[dataset.length-1].startDate);

	//alert("mindate = " + minDate + " | maxDate = " + maxDate);
	//alert(Date.parse(dataset[0].startDate).getMonth());
	// var minDate = new Date(2013,8,10);
	// var maxDate = new Date(2013,10,1);
	//console.log(minDate + " | " + maxDate);

	var xScale = d3.time.scale()
						.domain([minDate,maxDate])
						.range([2*padding+1, w-padding]);

	var yScale = d3.scale.linear()
					.domain([0, d3.max(dataset,function(d){
						return Math.max(d.maxPrice)*1.2;
					})])
					.range([padding,h-2*padding]);
	//Define X axis
	var xAxis = d3.svg.axis()
					.scale(xScale)
					.orient("bottom")
					.ticks(5);

	//Define Y axis
	var yAxis = d3.svg.axis()
					.scale(yScale)
					.orient("left")
					.ticks(5);



	//Create SVG element
	var svg = d3.select("body")
	.append("svg")
	.attr("width", w)
	.attr("height", h);

	//Create bars
	svg.selectAll("rect")
		.data(dataset)
		.enter()
		.append("rect")
		.attr("x", function(d) {
			return xScale(new Date(d.startDate));
		})
		.attr("y", function(d) {
			return yScale(d.minPrice);
		})
		.attr("width", "0.65em")
		.attr("height", function(d) {
			return yScale(d.maxPrice - d.minPrice);
		})
		.attr("fill", function(d) {
			return "rgb(0," + (255 - ((d.maxPrice - d.minPrice)/2/10)) + ",0)";
		})
		.on("mouseover", function(d) {

			//Get this bar's x/y values, then augment for the tooltip
			var xPosition = parseFloat(d3.select(this).attr("x")) + 0.05 / 2;
			var yPosition = parseFloat(d3.select(this).attr("y")) / 2 + h / 2;

			//Update the tooltip position and value
			d3.select("#tooltip")
				.style("left", xPosition + "px")
				.style("top", yPosition + "px")	
				.select("#value")
				.text(" $" + d.minPrice + " - $" + d.maxPrice);

			d3.select("#tooltip")
				.style("left", xPosition + "px")
				.style("top", yPosition + "px")	
				.select("#myDates")
				.text(d.startDate + " to " + d.endDate);

			//Show the tooltip
			d3.select("#tooltip").classed("hidden", false);
			
						
			d3.selectAll(".calendarRect")
			  .attr("fill", "#ccffff");

			tempDate = Date.parse(d.startDate);
			//console.log(tempDate);
			//console.log(Date.parse(d.endDate) - tempDate);
			//calendarDateRange.push(tempDate);

			while(tempDate - Date.parse(d.endDate) < 1){			
				var selectDate = "#" + tempDate.toString("MMMM") + "-" + tempDate.toString("d");
				//console.log(selectDate);
				d3.select(selectDate)
				  .attr("fill", "#ff6600");
				tempDate = tempDate.add(1).days();
				//console.log(tempDate);
			}
			

			//Adjust the calendar dates
			$('#calendarDates').text(d.startDate + " to " + d.endDate);
			//console.log(d.toString("MMMM") +"-"+ d.toString("d"));



			})
			.on("mouseout", function() {

				//Hide the tooltip
				d3.select("#tooltip").classed("hidden", true);

			})
			.on("click", function(d){
				var filterFlights = ""
				$.each(flights, function(k, v){

				if(filterDate(flights[k].startDate.substring(0,flights[k].startDate.indexOf("T")), d.startDate) == true)
				{
					filterFlights = filterFlights + "<p>" + flights[k].airlineCompany +
					" - $" + flights[k].price + " at " + flights[k].startDate + "</p>"
				}
				});
				var filterHotels= ""
				$.each(hotels, function(k, v){

				if(filterDate(hotels[k].startDate, d.startDate) == true)
				{
					filterHotels = filterHotels + "<p>" + hotels[k].hotelCompany +
					" - $" + hotels[k].price + "</p>"
				}
				});
				var filterRentalCars = ""
				$.each(rentalCars, function(k, v){

				if(filterDate(rentalCars[k].startDate, d.startDate) == true)
				{
					filterRentalCars = filterRentalCars + "<p>" + rentalCars[k].rentalCarCompany +
					" - $" + rentalCars[k].price + "</p>"
				}
			});

			$('#flights').html(filterFlights);
			$('#hotels').html(filterHotels);
			$('#rentalCars').html(filterRentalCars);
			$('#travelDate').text(d.startDate + " to " + d.endDate)
			// svg.selectAll("rect")
			// .attr("fill", function(d) {
			// return "rgb(0," + (255 - ((d.maxPrice - d.minPrice)/2/5)) + ",0)";
			// }

			d3.select(this)
			.style("fill", "blue");
	})
	   
  	//Create X axis
	svg.append("g")
		.attr("class", "xaxis")
		.attr("class", "axis")
		.attr("transform", "translate(0," + (h - 2*padding) + ")")
		.call(xAxis);

	// svg.selectAll(".xaxis text")  // select all the text elements for the xaxis
 //          .attr("transform", function(d) {
 //              return "translate(" + this.getBBox().height*-2 + "," + this.getBBox().height + ")rotate(-45)";
 //        });
	
	svg.append("text")
	   .attr("class", "x label")
	   .attr("text-anchor", "end")
	   .attr("x", w)
	   .attr("y", h-2*padding-6)
	   .text("Travel Start Date");

	svg.append("text")
	   .attr("class", "y label")
	   .attr("text-anchor", "end")
	   .attr("dy", "1.5em")
	   .attr("y", padding)
	   .attr("transform", "rotate(-90)")
	   .text("Price ($)");


	//Create Y axis
	svg.append("g")
		.attr("class", "yaxis")
		.attr("class", "axis")	
		.attr("transform", "translate(" + 2*padding + ",0)")
		.call(yAxis);
	
	// Create calendar

	var calW = 200;
	var calH = 600;
	var cellSize = 20;
	var calX = 0;
	var calY = 0;
	var calMonth = -1;
	var calData = createCalendarDates(minDate,maxDate);
	//console.log(calData);
	//alert(Date.today().toString("dddd"));

	var calSvg = d3.select("body")
				   .append("svg")
				   .attr("width", calW)
				   .attr("height", calH);

	calSvg.selectAll("rect")
		  .data(calData)
		  .enter()
		  .append("rect")
		  .attr("class", "calendarRect")
		  .attr("x", function(d){
		  	return cellX(d);
		  })
		  .attr("y", function(d){
		  	return cellY(d,1);
		  })
		  .attr("width", cellSize)
		  .attr("height", cellSize)
		  .attr("fill", "#ccffff")
		  .attr("id", function(d){
		  	//console.log(d.toString("MMMM") +"-"+ d.toString("d"));
		  	return d.toString("MMMM") +"-"+ d.toString("d");
		  });
	
	calY = -25;
	//c = [];
	calSvg.selectAll("text")
		  .data(calData)
		  .enter()
		  .append("text")
		  .attr("x", function(d){
		  	return cellX(d);
		  })
		  .attr("y", function(d){
		  	if(d.toString("d") == 1){
		  		//c.push(calY);
		  		monthTitle(d.toString("MMMM") + " " + d.toString("yyyy"));
		  	}
		  	return cellY(d);
		  })
		  //.attr("text-anchor", "right")
		  .text(function(d){
		  	
		  	return d.toString("d");
		  });
	//console.log(c);
	function cellX(d){
		var dayOfWeek = d.toString("dddd");

		return (cellSize + 1)*dayOfWeekNumeric(dayOfWeek) + calX;
	}

	function cellY(d, text){
		if(calMonth == -1){
			calMonth = d.toString("MMMM");
			calY = 40;
			// if(text == 1){
			// 	monthTitle(d.toString("MMMM") + " " + d.toString("yyyy"));
			// }
			return calY;
		}

		if(dayOfWeekNumeric(d.toString("dddd")) == 0){
			calY += cellSize + 1;
		}

		if(calMonth != d.toString("MMMM")){
			calY += 60;
			calMonth = d.toString("MMMM");
			// if(text == 1){
			// 	monthTitle(d.toString("MMMM") + " " + d.toString("yyyy"));
			// }
		}
		return calY;

	}

	function monthTitle(month){
		calSvg.append("text")
			  .attr("y", function(){
			  	return calY+40;
			  })
			  .attr("x", 20)
			  .text(month);
	}

	function dayOfWeekNumeric(day){
		day = day.toString().toLowerCase();

		if(day == "sunday"){
			return 0
		}
		if(day == "monday"){
			return 1
		}
		if(day == "tuesday"){
			return 2
		}
		if(day == "wednesday"){
			return 3
		}
		if(day == "thursday"){
			return 4
		}
		if(day == "friday"){
			return 5
		}
		if(day == "saturday"){
			return 6
		}
		else{
			return null;
		}

	}

	function createCalendarDates(startDate,endDate){
	

		firstCalendarDay = startDate.moveToFirstDayOfMonth();
		lastCalendarDay = endDate.moveToLastDayOfMonth();

		tempDate = firstCalendarDay;

		calendarDateRange = [];
		//calendarDateRange.push(tempDate);

		while((tempDate - lastCalendarDay) < 1){
			//console.log(tempDate);			
			calendarDateRange.push(new Date(tempDate));
			tempDate = tempDate.add(1).days();
		}
		return calendarDateRange;
	}
	
	
	//console.log(dateRange);	



</script>

<div id="travelInfo">
		<h3 id="travelDate">Date</h3>
        <p><strong id="flightTitle">Flights</strong></p>
        <p><span id="flights">flights</span></p>

        <p><strong id="hotelTitle">Hotels</strong></p>
        <p><span id="hotels">Here they are</span></p>

        <p><strong id="rentalCarTitle">Rental Cars</strong></p>
        <p><span id="rentalCars">Here they are</span></p>
</div>
